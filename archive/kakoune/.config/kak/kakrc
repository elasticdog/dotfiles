# User preference
# ───────────────

set-option global autoinfo command|onkey|normal
set-option global autoreload true
set-option global autowrap_column 80
set-option global grepcmd "rg --column --follow"
set-option global tabstop 4
set-option global ui_options terminal_assistant=none

colorscheme elasticdog

add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces -spc " "
add-highlighter global/trailing-whitespace regex "\h+$" 0:default,red

# for everything except built-in read-only buffers
hook global WinCreate ^[^*]+$ %{
    add-highlighter window/ number-lines -hlcursor -separator "  " -relative
    git show-diff
}

hook global BufWritePost ^[^*]+$ %{ git update-diff }

# Enable editor config
# ────────────────────

hook global BufOpenFile .* %{ editorconfig-load }
hook global BufNewFile .* %{ editorconfig-load }

# Filetype specific hooks
# ───────────────────────

hook global WinSetOption filetype=cue %{
    set-option window formatcmd "cue fmt --simplify -"
    set-option window lintcmd "cue vet -"
}

hook global WinSetOption filetype=fish %{
    set-option window formatcmd "fish_indent"
}

hook global WinSetOption filetype=git-(commit|rebase) %{
    set-option window autowrap_column 72
    autowrap-enable
}

hook global WinSetOption filetype=go %{
    set-option window formatcmd "gofmt -s"
    set-option window lintcmd "golint"
    hook buffer BufWritePre .* %{
        go-format -use-goimports
        lint
    }
}

hook global WinSetOption filetype=json %{
    set-option window formatcmd "/usr/sbin/prettier --parser json"
}

hook global BufCreate .*[.](jsonnet) %{
    set-option buffer filetype jsonnet
}

hook global WinSetOption filetype=jsonnet %{
    set-option window formatcmd "/usr/sbin/jsonnetfmt --string-style d -"
    hook buffer BufWritePre .* %{ format }
}

hook global WinSetOption filetype=markdown %{
    set-option window formatcmd "/usr/sbin/prettier --parser markdown --prose-wrap always"
}

hook global WinSetOption filetype=python %{
    set-option window formatcmd "/usr/sbin/black -"
}

hook global WinSetOption filetype=rust %{
    set-option window formatcmd "/usr/sbin/rustfmt"
    hook buffer BufWritePre .* %{ format }
}

hook global WinSetOption filetype=sh %{
    set-option window formatcmd "/usr/sbin/shfmt -s"
    set-option window lintcmd "/usr/sbin/shellcheck --external-sources --format=gcc"
    hook buffer BufWritePre .* %{ lint }
}

# Patterns to match from:
#   https://github.com/bazelbuild/buildtools/blob/master/buildifier/runner.bash.template
#
# '*.bzl'
# '*.sky'
# BUILD.bazel
# BUILD
# '*.BUILD'
# 'BUILD.*.bazel'
# 'BUILD.*.oss'
# WORKSPACE
# WORKSPACE.bazel
# WORKSPACE.oss
# 'WORKSPACE.*.bazel'
# 'WORKSPACE.*.oss'
#
# $ cat foo.bar | buildifier --type=build
# $ cat foo.bar | buildifier --type=bzl
# $ cat foo.bar | buildifier --type=workspace
# $ cat foo.bar | buildifier --type=default

source "%val{config}/filetype/starlark.kak"

hook global BufCreate .*(/?BUILD|WORKSPACE) %{
    set-option buffer filetype starlark
}

hook global WinSetOption filetype=starlark %{
    set-option window formatcmd "/usr/sbin/buildifier"
    set-option window lintcmd "/usr/sbin/buildifier --lint=warn"
    hook buffer BufWritePre .* %{ lint }
}

hook global BufCreate .*[.](hcl) %{
    set-option buffer filetype terraform
}

hook global WinSetOption filetype=terraform %{
    set-option window formatcmd "/usr/sbin/terraform fmt -"
}

hook global WinSetOption filetype=yaml %{
    set-option window formatcmd "/usr/sbin/prettier --parser yaml"
    set-option window lintcmd "/usr/sbin/yamllint -f parsable"
    hook buffer BufWritePre .* %{ lint }
}

hook global WinSetOption filetype=zig %{
    set-option window formatcmd "/usr/sbin/zig fmt --stdin"
}

hook global -always BufOpenFifo "\*grep\*" %{ map global normal "'" ":grep-next-match<ret>" }
hook global -always BufOpenFifo "\*lint-output\*" %{ map global normal "'" ":lint-next-error<ret>" }
hook global -always BufOpenFifo "\*make\*" %{ map global normal "'" ":make-next-error<ret>" }

# Various mappings
# ────────────────

# space is my leader
map global normal <space> , -docstring "leader"
map global normal <backspace> <space> -docstring "remove all selections except main"
map global normal <a-backspace> <a-space> -docstring "remove main selection"

map global normal "#" ": comment-line<ret>"
map global normal + ": lint<ret>"
map global normal , ": explore<ret>"
map global normal / "/(?i)"
map global normal <c-g> ":grep "
map global normal <c-p> ": fuzzy-file<ret>"
map global normal = ": format<ret>"

map global user -docstring "Fuzzy find a buffer from the current buflist to open" b ": fuzzy-buffer<ret>"
map global user -docstring "Delete current buffer" d ": delete-buffer<ret>"
map global user -docstring "Run the make utility wrapper with no arguments" m ": make<ret>"
map global user -docstring "Enable Git keymap mode for next key" g ": enter-user-mode<space>git<ret>"
map global user -docstring "Format lines to a width of `autowrap_column` characters" q "|par -w $kak_opt_autowrap_column<ret>vm%opt{autowrap_column}vh"
map global user -docstring "Write the current buffer to its file" w ": write<ret>"

declare-user-mode git
map global git -docstring "blame - Show what revision and author last modified each line of the current file" b ': kitty-terminal tig blame -C "+%val{cursor_line}" -- "%val{buffile}"<ret>'
map global git -docstring "commit - Record changes to the repository" c ": git commit<ret>"
map global git -docstring "diff - Show changes between HEAD and working tree" d ": git diff<ret>"
map global git -docstring "git - Explore the repository history" g ": kitty-terminal tig<ret>"
map global git -docstring "github - Copy canonical GitHub URL to system clipboard" h ": github-url<ret>"
map global git -docstring "log - Show commit logs for the current file" l ': kitty-terminal tig log -- "%val{buffile}"<ret>'
map global git -docstring "prompt - Run a free-form Git command prompt" p ":kitty-terminal tig "
map global git -docstring "status - Show the working tree status" s ": kitty-terminal tig status<ret>"
map global git -docstring "staged - Show staged changes" t ": git diff --staged<ret>"
map global git -docstring "write - Write and stage the current file" w ": write<ret>: git add<ret>: git update-diff<ret>"

# Helper commands
# ───────────────

define-command explore \
    -params ..1 -file-completion \
    -docstring "explore [<path>]: explore the directory of the current file
    The optional path argument will override the initial location" \
    %{ evaluate-commands %sh{
        if [ $# -ge 1 ] && [ -e $1 ]; then
            path=$1
        elif [ -f $kak_buffile ]; then
            path=$kak_buffile
        else
            path="${PWD}/"
        fi
        printf 'explore-terminal "%s"\n' "$path"
    }
}

define-command -hidden explore-terminal \
    -params ..1 -file-completion \
    %{ evaluate-commands %{
        kitty-terminal sh -c "
            export kak_session='%val{session}'
            export kak_client='%val{client}'
            %val{config}/scripts/lf.sh %arg(1)
        "
    }
}

declare-option -hidden str fuzzy_buflist ""

define-command fuzzy-buffer \
    -docstring "fuzzy-buffer: fuzzy find a buffer from the current buflist to open" \
    %{ evaluate-commands %sh{
        readonly buffers=$(mktemp)
        eval "set -- $kak_buflist"
        while [ $# -gt 0 ]; do
            if [ "$1" != "$kak_bufname" ]; then
                printf "%s\n" "$1" >>"$buffers"
            fi
            shift
        done
        printf "%s\n" "$kak_bufname" >>"$buffers"
        printf "set-option global fuzzy_buflist '%s'\n" "$buffers"
    }
    evaluate-commands %{ fuzzy-terminal --no-multi --tac }
}

define-command fuzzy-file \
    -docstring "fuzzy-file: fuzzy find files to select buffers to open" \
    %{ evaluate-commands %{
        fuzzy-terminal --multi --preview='bat --color always --style numbers {}'
    }
}

define-command -hidden fuzzy-terminal -params .. \
    %{ evaluate-commands %{
        kitty-terminal sh -c "
            export kak_session='%val{session}'
            export kak_client='%val{client}'
            export kak_buflist='%opt{fuzzy_buflist}'
            export SKIM_DEFAULT_COMMAND='%val{client_env_SKIM_DEFAULT_COMMAND}'
            export SKIM_DEFAULT_OPTIONS='%val{client_env_SKIM_DEFAULT_OPTIONS}'
            cd '%val{client_env_PWD}' && '%val{config}/scripts/skim.sh' %arg{@}
        "
    }
}

define-command github-url \
    -docstring "github-url: copy the canonical GitHub URL to the system clipboard" \
    %{ evaluate-commands %sh{
        # use the remote configured for fetching
        fetch_remote=$(git config --get "branch.$(git symbolic-ref --short HEAD).remote" || printf origin)
        base_url=$(git remote get-url "$fetch_remote" | sed -e "s|^git@github.com:|https://github.com/|")
        # assume the master branch; this is what I want 95% of the time
        master_commit=$(git ls-remote "$fetch_remote" master | awk '{ print $1 }')
        relative_path=$(git ls-files --full-name "$kak_bufname")
        selection_start="${kak_selection_desc%,*}"
        selection_end="${kak_selection_desc##*,}"

        if [ "$selection_start" == "$selection_end" ]; then
            github_url=$(printf "%s/blob/%s/%s" "${base_url%.git}" "$master_commit" "$relative_path")
        else
            start_line="${selection_start%\.*}"
            end_line="${selection_end%\.*}"

            # highlight the currently selected line(s)
            if [ "$start_line" == "$end_line" ]; then
                github_url=$(printf "%s/blob/%s/%s#L%s" "${base_url%.git}" "$master_commit" "$relative_path" "${start_line}")
            else
                github_url=$(printf "%s/blob/%s/%s#L%s-L%s" "${base_url%.git}" "$master_commit" "$relative_path" "${start_line}" "${end_line}")
            fi
        fi
        printf "echo -debug %s\n" "$github_url"
        printf "execute-keys -draft '!printf %s $github_url | $kak_opt_system_clipboard_copy<ret>'\n"
        printf "echo -markup %%{{Information}copied canonical GitHub URL to system clipboard}\n"
    }
}

define-command new-docs %{
    rename-client main
    set-option global jumpclient main

    new rename-client docs
    set-option global docsclient docs
}

define-command new-tools %{
    rename-client main
    set-option global jumpclient main

    new rename-client tools
    set-option global toolsclient tools
}

define-command trim-trailing-whitespace %{
    try %{ execute-keys -draft <a-x> s \h+$ <ret> d }
}

# Third-party plugins
# ───────────────────

source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

plug "Delapouite/kakoune-livedown"

# System clipboard handling
# ─────────────────────────

declare-option -hidden str system_clipboard_copy ""
declare-option -hidden str system_clipboard_paste ""

evaluate-commands %sh{
    case $(uname) in
        Linux) copy="xclip -i"; paste="xclip -o" ;;
        Darwin) copy="pbcopy"; paste="pbpaste" ;;
    esac

    printf "map global user -docstring 'Paste (after) from system clipboard' p '!%s<ret>'\n" "$paste"
    printf "map global user -docstring 'Paste (before) from system clipboard' P '<a-!>%s<ret>'\n" "$paste"
    printf "map global user -docstring 'Replace from system clipboard' R '|%s<ret>'\n" "$paste"
    printf "map global user -docstring 'Yank to system clipboard' y '<a-|>%s<ret>: echo -markup %%{{Information}copied selection to system clipboard}<ret>'\n" "$copy"

    printf "set-option global system_clipboard_copy '%s'\n" "$copy"
    printf "set-option global system_clipboard_paste '%s'\n" "$paste"
}

# Load local Kakoune config file if it exists
# ───────────────────────────────────────────
evaluate-commands %sh{
    [ -f "${kak_config}/kakrc.local" ] && printf "source '${kak_config}/kakrc.local'\n"
}
